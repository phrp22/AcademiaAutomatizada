import streamlit as st
import psycopg2
import os
import bcrypt

# Verifica se as vari√°veis foram carregadas corretamente
if "SUPABASE_DATABASE_URL" in st.secrets:
    DATABASE_URL = st.secrets["SUPABASE_DATABASE_URL"]
    
else:
    st.error("‚ùå ERRO: Vari√°vel 'SUPABASE_DATABASE_URL' n√£o encontrada nos Secrets do Streamlit Cloud.")
    DATABASE_URL = None  # Define como None para evitar erro de NameError

if "SUPABASE_API_KEY" in st.secrets:
    SUPABASE_API_KEY = st.secrets["SUPABASE_API_KEY"]
else:
    st.error("‚ùå ERRO: Vari√°vel 'SUPABASE_API_KEY' n√£o encontrada nos Secrets do Streamlit Cloud.")
    SUPABASE_API_KEY = None  # Define como None para evitar erro de NameError

def create_db():
    """Cria as tabelas do banco de dados se ainda n√£o existirem."""
    conn = get_db_connection()
    
    if conn is None:
        print("‚ùå Erro: N√£o foi poss√≠vel conectar ao banco de dados.")
        return
    
    try:
        with conn.cursor() as c:
            # Criar tabela de usu√°rios
            c.execute('''CREATE TABLE IF NOT EXISTS users (
                            id SERIAL PRIMARY KEY,
                            username TEXT UNIQUE NOT NULL,
                            password TEXT NOT NULL,
                            role TEXT NOT NULL
                        )''')

            # Criar tabela de respostas de escalas
            c.execute('''CREATE TABLE IF NOT EXISTS scale_responses (
                            id SERIAL PRIMARY KEY,
                            username TEXT NOT NULL,
                            scale_name TEXT NOT NULL,
                            responses TEXT NOT NULL,
                            timestamp TIMESTAMP DEFAULT NOW(),
                            FOREIGN KEY (username) REFERENCES users(username) ON DELETE CASCADE
                        )''')

            conn.commit()
            print("‚úÖ Banco de dados inicializado corretamente!")
    except psycopg2.Error as e:
        print(f"‚ùå Erro ao criar tabelas: {e}")
        if conn:
            conn.rollback()
    finally:
        if conn:
            conn.close()
            print("üîå Conex√£o fechada corretamente ap√≥s cria√ß√£o das tabelas.")

# Fun√ß√£o para conectar ao banco de dados
def get_db_connection():
    """Cria uma conex√£o com o banco de dados Supabase."""
    if DATABASE_URL is None:
        st.error("‚ùå Erro: Conex√£o ao banco de dados n√£o configurada.")
        return None
    try:
        conn = psycopg2.connect(DATABASE_URL, sslmode="require")
        return conn
    except psycopg2.Error as e:
        st.error(f"‚ùå Erro ao conectar ao banco: {e}")
        return None

@st.cache_data(ttl=60)
def login_user(username, password):
    """Autentica o usu√°rio verificando a senha e retorna o papel (role) corretamente."""
    conn = get_db_connection()
    try:
        with conn.cursor() as c:
            c.execute("SELECT password, role FROM users WHERE username = %s", (username,))
            user_data = c.fetchone()
    except psycopg2.Error as e:
        print(f"Erro ao buscar usu√°rio: {e}")
        return None
    finally:
        conn.close()

    if user_data:
        hashed_password, role = user_data
        if bcrypt.checkpw(password.encode(), hashed_password.encode()):
            print(f"Login bem-sucedido! Usu√°rio {username} autenticado como {role}.")
            return role
        else:
            print("Senha incorreta.")
    else:
        print("Usu√°rio n√£o encontrado.")
    return None

def register_user(username, password, role):
    """Registra um novo usu√°rio no banco de dados com senha criptografada."""
    conn = get_db_connection()

    if conn is None:
        print("‚ùå Erro: N√£o foi poss√≠vel conectar ao banco de dados.")
        return False  # Se a conex√£o falhar, n√£o tenta registrar
    
    try:
        with conn.cursor() as c:
            # Verifica se o usu√°rio j√° existe antes de tentar cadastrar
            c.execute("SELECT username FROM users WHERE username = %s", (username,))
            existing_user = c.fetchone()

            if existing_user:
                print("‚ö† Erro: Nome de usu√°rio j√° cadastrado.")
                return False  # Evita erro de duplica√ß√£o

            # Criptografar a senha
            hashed_pw = bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode('utf-8')

            # Inserir novo usu√°rio
            c.execute(
                "INSERT INTO users (username, password, role) VALUES (%s, %s, %s) RETURNING id",
                (username, hashed_pw, role)
            )
            user_id = c.fetchone()
            conn.commit()
        
        if user_id:
            print(f"‚úÖ Usu√°rio {username} cadastrado com sucesso! ID: {user_id[0]}")
            return True
        else:
            print(f"‚ö† Erro: Usu√°rio {username} pode n√£o ter sido salvo corretamente.")
            return False

    except psycopg2.IntegrityError:
        conn.rollback()
        print("‚ùå Erro: O nome de usu√°rio j√° existe.")
        return False
    except psycopg2.Error as e:
        print(f"‚ùå Erro no banco de dados: {e}")
        return False
    finally:
        if conn:
            conn.close()  # Garante que a conex√£o seja fechada corretamente


@st.cache_data(ttl=60)
def get_user_role(username):
    """Retorna o papel do usu√°rio (Paciente ou Profissional), armazenando em cache."""
    conn = get_db_connection()
    if conn is None:
        return None  # Evita erro ao tentar acessar cursor de conex√£o inexistente

    try:
        with conn.cursor() as c:
            c.execute("SELECT role FROM users WHERE username = %s", (username,))
            user_data = c.fetchone()
            return user_data[0] if user_data else None
    except psycopg2.Error as e:
        print(f"Erro ao buscar papel do usu√°rio: {e}")
        return None
    finally:
        conn.close()


def save_scale_responses(username, scale_name, responses):
    """Salva as respostas da escala no banco de dados."""
    conn = get_db_connection()
    
    if conn is None:
        print("‚ùå Erro: N√£o foi poss√≠vel conectar ao banco de dados.")
        return False
    
    try:
        with conn.cursor() as c:
            c.execute(
                "INSERT INTO scale_responses (username, scale_name, responses) VALUES (%s, %s, %s)",
                (username, scale_name, str(responses))  # Convertendo lista para string antes de salvar
            )
            conn.commit()
            return True
    except psycopg2.Error as e:
        print(f"‚ùå Erro ao salvar respostas: {e}")
        return False
    finally:
        if conn:
            conn.close()